// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"career_backend/internal/dal/db/model"
)

func newUserInfoModel(db *gorm.DB, opts ...gen.DOOption) userInfoModel {
	_userInfoModel := userInfoModel{}

	_userInfoModel.userInfoModelDo.UseDB(db, opts...)
	_userInfoModel.userInfoModelDo.UseModel(&model.UserInfoModel{})

	tableName := _userInfoModel.userInfoModelDo.TableName()
	_userInfoModel.ALL = field.NewAsterisk(tableName)
	_userInfoModel.ID = field.NewInt64(tableName, "id")
	_userInfoModel.Username = field.NewString(tableName, "username")
	_userInfoModel.Nickname = field.NewString(tableName, "nickname")
	_userInfoModel.Password = field.NewString(tableName, "password")
	_userInfoModel.Avatar = field.NewString(tableName, "avatar")
	_userInfoModel.Gender = field.NewInt32(tableName, "gender")
	_userInfoModel.Birthday = field.NewString(tableName, "birthday")
	_userInfoModel.Phone = field.NewString(tableName, "phone")
	_userInfoModel.Email = field.NewString(tableName, "email")
	_userInfoModel.Bio = field.NewString(tableName, "bio")
	_userInfoModel.CreatedAt = field.NewInt64(tableName, "created_at")
	_userInfoModel.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userInfoModel.LoginAt = field.NewInt64(tableName, "login_at")
	_userInfoModel.Status = field.NewInt32(tableName, "status")

	_userInfoModel.fillFieldMap()

	return _userInfoModel
}

// userInfoModel 用户表
type userInfoModel struct {
	userInfoModelDo userInfoModelDo

	ALL       field.Asterisk
	ID        field.Int64
	Username  field.String
	Nickname  field.String // 用户昵称
	Password  field.String
	Avatar    field.String // 头像
	Gender    field.Int32
	Birthday  field.String
	Phone     field.String // 手机号
	Email     field.String // 邮箱
	Bio       field.String
	CreatedAt field.Int64
	UpdatedAt field.Int64
	LoginAt   field.Int64
	Status    field.Int32

	fieldMap map[string]field.Expr
}

func (u userInfoModel) Table(newTableName string) *userInfoModel {
	u.userInfoModelDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userInfoModel) As(alias string) *userInfoModel {
	u.userInfoModelDo.DO = *(u.userInfoModelDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userInfoModel) updateTableName(table string) *userInfoModel {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Username = field.NewString(table, "username")
	u.Nickname = field.NewString(table, "nickname")
	u.Password = field.NewString(table, "password")
	u.Avatar = field.NewString(table, "avatar")
	u.Gender = field.NewInt32(table, "gender")
	u.Birthday = field.NewString(table, "birthday")
	u.Phone = field.NewString(table, "phone")
	u.Email = field.NewString(table, "email")
	u.Bio = field.NewString(table, "bio")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.LoginAt = field.NewInt64(table, "login_at")
	u.Status = field.NewInt32(table, "status")

	u.fillFieldMap()

	return u
}

func (u *userInfoModel) WithContext(ctx context.Context) IUserInfoModelDo {
	return u.userInfoModelDo.WithContext(ctx)
}

func (u userInfoModel) TableName() string { return u.userInfoModelDo.TableName() }

func (u userInfoModel) Alias() string { return u.userInfoModelDo.Alias() }

func (u userInfoModel) Columns(cols ...field.Expr) gen.Columns {
	return u.userInfoModelDo.Columns(cols...)
}

func (u *userInfoModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userInfoModel) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["password"] = u.Password
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["gender"] = u.Gender
	u.fieldMap["birthday"] = u.Birthday
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["email"] = u.Email
	u.fieldMap["bio"] = u.Bio
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["login_at"] = u.LoginAt
	u.fieldMap["status"] = u.Status
}

func (u userInfoModel) clone(db *gorm.DB) userInfoModel {
	u.userInfoModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userInfoModel) replaceDB(db *gorm.DB) userInfoModel {
	u.userInfoModelDo.ReplaceDB(db)
	return u
}

type userInfoModelDo struct{ gen.DO }

type IUserInfoModelDo interface {
	gen.SubQuery
	Debug() IUserInfoModelDo
	WithContext(ctx context.Context) IUserInfoModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserInfoModelDo
	WriteDB() IUserInfoModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserInfoModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserInfoModelDo
	Not(conds ...gen.Condition) IUserInfoModelDo
	Or(conds ...gen.Condition) IUserInfoModelDo
	Select(conds ...field.Expr) IUserInfoModelDo
	Where(conds ...gen.Condition) IUserInfoModelDo
	Order(conds ...field.Expr) IUserInfoModelDo
	Distinct(cols ...field.Expr) IUserInfoModelDo
	Omit(cols ...field.Expr) IUserInfoModelDo
	Join(table schema.Tabler, on ...field.Expr) IUserInfoModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfoModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserInfoModelDo
	Group(cols ...field.Expr) IUserInfoModelDo
	Having(conds ...gen.Condition) IUserInfoModelDo
	Limit(limit int) IUserInfoModelDo
	Offset(offset int) IUserInfoModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfoModelDo
	Unscoped() IUserInfoModelDo
	Create(values ...*model.UserInfoModel) error
	CreateInBatches(values []*model.UserInfoModel, batchSize int) error
	Save(values ...*model.UserInfoModel) error
	First() (*model.UserInfoModel, error)
	Take() (*model.UserInfoModel, error)
	Last() (*model.UserInfoModel, error)
	Find() ([]*model.UserInfoModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfoModel, err error)
	FindInBatches(result *[]*model.UserInfoModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserInfoModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserInfoModelDo
	Assign(attrs ...field.AssignExpr) IUserInfoModelDo
	Joins(fields ...field.RelationField) IUserInfoModelDo
	Preload(fields ...field.RelationField) IUserInfoModelDo
	FirstOrInit() (*model.UserInfoModel, error)
	FirstOrCreate() (*model.UserInfoModel, error)
	FindByPage(offset int, limit int) (result []*model.UserInfoModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserInfoModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetUserByUsername(username string) (result *model.UserInfoModel, err error)
	GetUserByPhone(phone string) (result *model.UserInfoModel, err error)
	GetUserByEmail(email string) (result *model.UserInfoModel, err error)
}

// SELECT * FROM @@table WHERE username = @username
func (u userInfoModelDo) GetUserByUsername(username string) (result *model.UserInfoModel, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, username)
	generateSQL.WriteString("SELECT * FROM user_info WHERE username = ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE phone = @phone
func (u userInfoModelDo) GetUserByPhone(phone string) (result *model.UserInfoModel, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, phone)
	generateSQL.WriteString("SELECT * FROM user_info WHERE phone = ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE email = @email
func (u userInfoModelDo) GetUserByEmail(email string) (result *model.UserInfoModel, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, email)
	generateSQL.WriteString("SELECT * FROM user_info WHERE email = ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userInfoModelDo) Debug() IUserInfoModelDo {
	return u.withDO(u.DO.Debug())
}

func (u userInfoModelDo) WithContext(ctx context.Context) IUserInfoModelDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userInfoModelDo) ReadDB() IUserInfoModelDo {
	return u.Clauses(dbresolver.Read)
}

func (u userInfoModelDo) WriteDB() IUserInfoModelDo {
	return u.Clauses(dbresolver.Write)
}

func (u userInfoModelDo) Session(config *gorm.Session) IUserInfoModelDo {
	return u.withDO(u.DO.Session(config))
}

func (u userInfoModelDo) Clauses(conds ...clause.Expression) IUserInfoModelDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userInfoModelDo) Returning(value interface{}, columns ...string) IUserInfoModelDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userInfoModelDo) Not(conds ...gen.Condition) IUserInfoModelDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userInfoModelDo) Or(conds ...gen.Condition) IUserInfoModelDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userInfoModelDo) Select(conds ...field.Expr) IUserInfoModelDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userInfoModelDo) Where(conds ...gen.Condition) IUserInfoModelDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userInfoModelDo) Order(conds ...field.Expr) IUserInfoModelDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userInfoModelDo) Distinct(cols ...field.Expr) IUserInfoModelDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userInfoModelDo) Omit(cols ...field.Expr) IUserInfoModelDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userInfoModelDo) Join(table schema.Tabler, on ...field.Expr) IUserInfoModelDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userInfoModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfoModelDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userInfoModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserInfoModelDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userInfoModelDo) Group(cols ...field.Expr) IUserInfoModelDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userInfoModelDo) Having(conds ...gen.Condition) IUserInfoModelDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userInfoModelDo) Limit(limit int) IUserInfoModelDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userInfoModelDo) Offset(offset int) IUserInfoModelDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userInfoModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfoModelDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userInfoModelDo) Unscoped() IUserInfoModelDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userInfoModelDo) Create(values ...*model.UserInfoModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userInfoModelDo) CreateInBatches(values []*model.UserInfoModel, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userInfoModelDo) Save(values ...*model.UserInfoModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userInfoModelDo) First() (*model.UserInfoModel, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoModel), nil
	}
}

func (u userInfoModelDo) Take() (*model.UserInfoModel, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoModel), nil
	}
}

func (u userInfoModelDo) Last() (*model.UserInfoModel, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoModel), nil
	}
}

func (u userInfoModelDo) Find() ([]*model.UserInfoModel, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserInfoModel), err
}

func (u userInfoModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfoModel, err error) {
	buf := make([]*model.UserInfoModel, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userInfoModelDo) FindInBatches(result *[]*model.UserInfoModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userInfoModelDo) Attrs(attrs ...field.AssignExpr) IUserInfoModelDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userInfoModelDo) Assign(attrs ...field.AssignExpr) IUserInfoModelDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userInfoModelDo) Joins(fields ...field.RelationField) IUserInfoModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userInfoModelDo) Preload(fields ...field.RelationField) IUserInfoModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userInfoModelDo) FirstOrInit() (*model.UserInfoModel, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoModel), nil
	}
}

func (u userInfoModelDo) FirstOrCreate() (*model.UserInfoModel, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfoModel), nil
	}
}

func (u userInfoModelDo) FindByPage(offset int, limit int) (result []*model.UserInfoModel, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userInfoModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userInfoModelDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userInfoModelDo) Delete(models ...*model.UserInfoModel) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userInfoModelDo) withDO(do gen.Dao) *userInfoModelDo {
	u.DO = *do.(*gen.DO)
	return u
}
