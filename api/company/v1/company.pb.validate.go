// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/company/v1/company.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Company with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Company) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Company with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CompanyMultiError, or nil if none found.
func (m *Company) ValidateAll() error {
	return m.validate(true)
}

func (m *Company) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for WalletAddress

	// no validation rules for LogoUrl

	if len(errors) > 0 {
		return CompanyMultiError(errors)
	}

	return nil
}

// CompanyMultiError is an error wrapping multiple validation errors returned
// by Company.ValidateAll() if the designated constraints aren't met.
type CompanyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyMultiError) AllErrors() []error { return m }

// CompanyValidationError is the validation error returned by Company.Validate
// if the designated constraints aren't met.
type CompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyValidationError) ErrorName() string { return "CompanyValidationError" }

// Error satisfies the builtin error interface
func (e CompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompany.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyValidationError{}

// Validate checks the field values on CreateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCompanyRequestMultiError, or nil if none found.
func (m *CreateCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for WalletAddress

	// no validation rules for LogoUrl

	if len(errors) > 0 {
		return CreateCompanyRequestMultiError(errors)
	}

	return nil
}

// CreateCompanyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCompanyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCompanyRequestMultiError) AllErrors() []error { return m }

// CreateCompanyRequestValidationError is the validation error returned by
// CreateCompanyRequest.Validate if the designated constraints aren't met.
type CreateCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompanyRequestValidationError) ErrorName() string {
	return "CreateCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompanyRequestValidationError{}

// Validate checks the field values on CreateCompanyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCompanyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCompanyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCompanyReplyMultiError, or nil if none found.
func (m *CreateCompanyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCompanyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for WalletAddress

	if len(errors) > 0 {
		return CreateCompanyReplyMultiError(errors)
	}

	return nil
}

// CreateCompanyReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCompanyReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCompanyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCompanyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCompanyReplyMultiError) AllErrors() []error { return m }

// CreateCompanyReplyValidationError is the validation error returned by
// CreateCompanyReply.Validate if the designated constraints aren't met.
type CreateCompanyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompanyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompanyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompanyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompanyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompanyReplyValidationError) ErrorName() string {
	return "CreateCompanyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompanyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompanyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompanyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompanyReplyValidationError{}

// Validate checks the field values on UpdateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCompanyRequestMultiError, or nil if none found.
func (m *UpdateCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateCompanyRequestMultiError(errors)
	}

	return nil
}

// UpdateCompanyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCompanyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCompanyRequestMultiError) AllErrors() []error { return m }

// UpdateCompanyRequestValidationError is the validation error returned by
// UpdateCompanyRequest.Validate if the designated constraints aren't met.
type UpdateCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCompanyRequestValidationError) ErrorName() string {
	return "UpdateCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCompanyRequestValidationError{}

// Validate checks the field values on UpdateCompanyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCompanyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCompanyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCompanyReplyMultiError, or nil if none found.
func (m *UpdateCompanyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCompanyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCompanyReplyMultiError(errors)
	}

	return nil
}

// UpdateCompanyReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateCompanyReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateCompanyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCompanyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCompanyReplyMultiError) AllErrors() []error { return m }

// UpdateCompanyReplyValidationError is the validation error returned by
// UpdateCompanyReply.Validate if the designated constraints aren't met.
type UpdateCompanyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCompanyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCompanyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCompanyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCompanyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCompanyReplyValidationError) ErrorName() string {
	return "UpdateCompanyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCompanyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCompanyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCompanyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCompanyReplyValidationError{}

// Validate checks the field values on DeleteCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCompanyRequestMultiError, or nil if none found.
func (m *DeleteCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCompanyRequestMultiError(errors)
	}

	return nil
}

// DeleteCompanyRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCompanyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCompanyRequestMultiError) AllErrors() []error { return m }

// DeleteCompanyRequestValidationError is the validation error returned by
// DeleteCompanyRequest.Validate if the designated constraints aren't met.
type DeleteCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCompanyRequestValidationError) ErrorName() string {
	return "DeleteCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCompanyRequestValidationError{}

// Validate checks the field values on DeleteCompanyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCompanyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCompanyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCompanyReplyMultiError, or nil if none found.
func (m *DeleteCompanyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCompanyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCompanyReplyMultiError(errors)
	}

	return nil
}

// DeleteCompanyReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteCompanyReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteCompanyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCompanyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCompanyReplyMultiError) AllErrors() []error { return m }

// DeleteCompanyReplyValidationError is the validation error returned by
// DeleteCompanyReply.Validate if the designated constraints aren't met.
type DeleteCompanyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCompanyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCompanyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCompanyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCompanyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCompanyReplyValidationError) ErrorName() string {
	return "DeleteCompanyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCompanyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCompanyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCompanyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCompanyReplyValidationError{}

// Validate checks the field values on GetCompanyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyRequestMultiError, or nil if none found.
func (m *GetCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCompanyRequestMultiError(errors)
	}

	return nil
}

// GetCompanyRequestMultiError is an error wrapping multiple validation errors
// returned by GetCompanyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyRequestMultiError) AllErrors() []error { return m }

// GetCompanyRequestValidationError is the validation error returned by
// GetCompanyRequest.Validate if the designated constraints aren't met.
type GetCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyRequestValidationError) ErrorName() string {
	return "GetCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyRequestValidationError{}

// Validate checks the field values on GetCompanyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyReplyMultiError, or nil if none found.
func (m *GetCompanyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCompanyReplyValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCompanyReplyValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyReplyValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCompanyReplyMultiError(errors)
	}

	return nil
}

// GetCompanyReplyMultiError is an error wrapping multiple validation errors
// returned by GetCompanyReply.ValidateAll() if the designated constraints
// aren't met.
type GetCompanyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyReplyMultiError) AllErrors() []error { return m }

// GetCompanyReplyValidationError is the validation error returned by
// GetCompanyReply.Validate if the designated constraints aren't met.
type GetCompanyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyReplyValidationError) ErrorName() string { return "GetCompanyReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCompanyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyReplyValidationError{}

// Validate checks the field values on GetCompanyByAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyByAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyByAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyByAddressRequestMultiError, or nil if none found.
func (m *GetCompanyByAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyByAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WalletAddress

	if len(errors) > 0 {
		return GetCompanyByAddressRequestMultiError(errors)
	}

	return nil
}

// GetCompanyByAddressRequestMultiError is an error wrapping multiple
// validation errors returned by GetCompanyByAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCompanyByAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyByAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyByAddressRequestMultiError) AllErrors() []error { return m }

// GetCompanyByAddressRequestValidationError is the validation error returned
// by GetCompanyByAddressRequest.Validate if the designated constraints aren't met.
type GetCompanyByAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyByAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyByAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyByAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyByAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyByAddressRequestValidationError) ErrorName() string {
	return "GetCompanyByAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyByAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyByAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyByAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyByAddressRequestValidationError{}

// Validate checks the field values on ListCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCompanyRequestMultiError, or nil if none found.
func (m *ListCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCompanyRequestMultiError(errors)
	}

	return nil
}

// ListCompanyRequestMultiError is an error wrapping multiple validation errors
// returned by ListCompanyRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCompanyRequestMultiError) AllErrors() []error { return m }

// ListCompanyRequestValidationError is the validation error returned by
// ListCompanyRequest.Validate if the designated constraints aren't met.
type ListCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompanyRequestValidationError) ErrorName() string {
	return "ListCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompanyRequestValidationError{}

// Validate checks the field values on ListCompanyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCompanyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCompanyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCompanyReplyMultiError, or nil if none found.
func (m *ListCompanyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCompanyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCompanyReplyMultiError(errors)
	}

	return nil
}

// ListCompanyReplyMultiError is an error wrapping multiple validation errors
// returned by ListCompanyReply.ValidateAll() if the designated constraints
// aren't met.
type ListCompanyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCompanyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCompanyReplyMultiError) AllErrors() []error { return m }

// ListCompanyReplyValidationError is the validation error returned by
// ListCompanyReply.Validate if the designated constraints aren't met.
type ListCompanyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompanyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompanyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompanyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompanyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompanyReplyValidationError) ErrorName() string { return "ListCompanyReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListCompanyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompanyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompanyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompanyReplyValidationError{}
